
Receiver.Board.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000020c  00800060  00800060  00000560  2**0
                  ALLOC
  2 .stab         000014dc  00000000  00000000  00000560  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      0000118f  00000000  00000000  00001a3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	21 c0       	rjmp	.+66     	; 0x48 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	3c c2       	rjmp	.+1144   	; 0x490 <__vector_11>
  18:	17 c2       	rjmp	.+1070   	; 0x448 <__vector_12>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ac 36       	cpi	r26, 0x6C	; 108
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6d d0       	rcall	.+218    	; 0x11e <main>
  44:	51 c2       	rjmp	.+1186   	; 0x4e8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_2>:
 return 0;
}

//External Interrupt 1
ISR(INT1_vect)
{
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	ef 92       	push	r14
  54:	ff 92       	push	r15
  56:	0f 93       	push	r16
  58:	1f 93       	push	r17
  5a:	2f 93       	push	r18
  5c:	3f 93       	push	r19
  5e:	4f 93       	push	r20
  60:	5f 93       	push	r21
  62:	6f 93       	push	r22
  64:	7f 93       	push	r23
  66:	8f 93       	push	r24
  68:	9f 93       	push	r25
  6a:	af 93       	push	r26
  6c:	bf 93       	push	r27
  6e:	ef 93       	push	r30
  70:	ff 93       	push	r31
  72:	df 93       	push	r29
  74:	cf 93       	push	r28
  76:	0f 92       	push	r0
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62

		//free (m_pucBuff);



}
  7c:	ed b6       	in	r14, 0x3d	; 61
  7e:	fe b6       	in	r15, 0x3e	; 62
//External Interrupt 1
ISR(INT1_vect)
{
	uint8_t ucTmp3;
	uint8_t * m_pucBuff;
	CEDown();
  80:	6c d0       	rcall	.+216    	; 0x15a <CEDown>
	 // new data available in the RX FIFO, MCU setit self to Stand-by I mode

	WriteReg(STATUS, 0x7E); // clear the interrupt bit
  82:	87 e0       	ldi	r24, 0x07	; 7
  84:	6e e7       	ldi	r22, 0x7E	; 126
  86:	83 d0       	rcall	.+262    	; 0x18e <WriteReg>


		ucTmp3 = NOP;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	89 83       	std	Y+1, r24	; 0x01

		CMD_2(R_RX_PL_WID, &ucTmp3, 1, &ucTmp3); // read the length of the package
  8c:	80 e6       	ldi	r24, 0x60	; 96
  8e:	9e 01       	movw	r18, r28
  90:	2f 5f       	subi	r18, 0xFF	; 255
  92:	3f 4f       	sbci	r19, 0xFF	; 255
  94:	b9 01       	movw	r22, r18
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	89 d0       	rcall	.+274    	; 0x1ac <CMD_2>

		if (ucTmp3>32)
  9a:	49 81       	ldd	r20, Y+1	; 0x01
  9c:	41 32       	cpi	r20, 0x21	; 33
  9e:	30 f0       	brcs	.+12     	; 0xac <__vector_2+0x64>
		{
			CMD(FLUSH_RX);
  a0:	82 ee       	ldi	r24, 0xE2	; 226
  a2:	f2 d0       	rcall	.+484    	; 0x288 <CMD>
			WriteReg(STATUS, 0x7E); // clear the interrupt bit
  a4:	87 e0       	ldi	r24, 0x07	; 7
  a6:	6e e7       	ldi	r22, 0x7E	; 126
  a8:	72 d0       	rcall	.+228    	; 0x18e <WriteReg>
  aa:	1c c0       	rjmp	.+56     	; 0xe4 <__vector_2+0x9c>
			return;
		}

		//m_pucBuff = (uint8_t*) malloc((ucTmp3+1) * sizeof(uint8_t));
		m_pucBuff = (uint8_t*) alloca((ucTmp3+1) * sizeof(uint8_t));
  ac:	84 2f       	mov	r24, r20
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	2d b7       	in	r18, 0x3d	; 61
  b4:	3e b7       	in	r19, 0x3e	; 62
  b6:	28 1b       	sub	r18, r24
  b8:	39 0b       	sbc	r19, r25
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	f8 94       	cli
  be:	3e bf       	out	0x3e, r19	; 62
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	2d bf       	out	0x3d, r18	; 61
  c4:	0d b7       	in	r16, 0x3d	; 61
  c6:	1e b7       	in	r17, 0x3e	; 62
  c8:	0f 5f       	subi	r16, 0xFF	; 255
  ca:	1f 4f       	sbci	r17, 0xFF	; 255
				(*reset)();
			}

		//

		CMD_2(R_RX_PAYLOAD, m_pucBuff, ucTmp3, m_pucBuff); // read the received data from the RX FIFO
  cc:	81 e6       	ldi	r24, 0x61	; 97
  ce:	b8 01       	movw	r22, r16
  d0:	98 01       	movw	r18, r16
  d2:	6c d0       	rcall	.+216    	; 0x1ac <CMD_2>


		CEUp(); //return to RTX mode
  d4:	44 d0       	rcall	.+136    	; 0x15e <CEUp>

		m_pucBuff[ucTmp3]='\0';
  d6:	89 81       	ldd	r24, Y+1	; 0x01
  d8:	f8 01       	movw	r30, r16
  da:	e8 0f       	add	r30, r24
  dc:	f1 1d       	adc	r31, r1
  de:	10 82       	st	Z, r1


		uart_puts((const char *)m_pucBuff);
  e0:	c8 01       	movw	r24, r16
  e2:	a6 d1       	rcall	.+844    	; 0x430 <uart_puts>

		//free (m_pucBuff);



}
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	fe be       	out	0x3e, r15	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	ed be       	out	0x3d, r14	; 61
  ee:	0f 90       	pop	r0
  f0:	cf 91       	pop	r28
  f2:	df 91       	pop	r29
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	1f 91       	pop	r17
 10e:	0f 91       	pop	r16
 110:	ff 90       	pop	r15
 112:	ef 90       	pop	r14
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:
void (*reset)(void);


int main(){

	reset=NULL;
 11e:	10 92 65 02 	sts	0x0265, r1
 122:	10 92 64 02 	sts	0x0264, r1


//Initializing UART
 uart_init(375000,USE_1X); //set uart baud rate to 500K=500000
 126:	68 ed       	ldi	r22, 0xD8	; 216
 128:	78 eb       	ldi	r23, 0xB8	; 184
 12a:	85 e0       	ldi	r24, 0x05	; 5
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	2f d1       	rcall	.+606    	; 0x390 <uart_init>

//Initializing SPI
 SPI_Init(D2,MSB,Rising,Leading);
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	00 d1       	rcall	.+512    	; 0x33c <SPI_Init>

//Initializing NRF24L01P
NRF24L01P_Init(NRF24L01P_mProperty);
 13c:	40 91 66 02 	lds	r20, 0x0266
 140:	50 91 67 02 	lds	r21, 0x0267
 144:	60 91 68 02 	lds	r22, 0x0268
 148:	70 91 69 02 	lds	r23, 0x0269
 14c:	80 91 6a 02 	lds	r24, 0x026A
 150:	90 91 6b 02 	lds	r25, 0x026B
 154:	a0 d0       	rcall	.+320    	; 0x296 <NRF24L01P_Init>



 sei(); //enable global interrupt
 156:	78 94       	sei
 158:	ff cf       	rjmp	.-2      	; 0x158 <main+0x3a>

0000015a <CEDown>:
//	pTmp->CEUp(); // return to PRX mode
//}
//

void CEDown(void){
	NRF24L01P_CE_PORT &= ~_BV(NRF24L01P_CE_PIN);  //Chip Disabled
 15a:	a8 98       	cbi	0x15, 0	; 21
}
 15c:	08 95       	ret

0000015e <CEUp>:

void CEUp(void) {
	NRF24L01P_CE_PORT |= _BV(NRF24L01P_CE_PIN);	//Chip Enabled
 15e:	a8 9a       	sbi	0x15, 0	; 21
}
 160:	08 95       	ret

00000162 <Start_SS>:

void Start_SS(void)
{
	NRF24L01P_CSN_PORT &= ~_BV(NRF24L01P_CSN_PIN);
 162:	c2 98       	cbi	0x18, 2	; 24
	//_delay_ms(1);
}
 164:	08 95       	ret

00000166 <Stop_SS>:

void Stop_SS(void)
{
	NRF24L01P_CSN_PORT |= _BV(NRF24L01P_CSN_PIN);
 166:	c2 9a       	sbi	0x18, 2	; 24
}
 168:	08 95       	ret

0000016a <ReadReg>:
//		m_sProperty.ucMaxTxQueueLength = 20; // the TX queue size should be less than 20, or the receiver may crash
//	//portEXIT_CRITICAL();

}

uint8_t ReadReg(uint8_t ucAddr, uint8_t *pucData) {
 16a:	ff 92       	push	r15
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	8b 01       	movw	r16, r22
	NRF24L01P_CE_PORT |= _BV(NRF24L01P_CE_PIN);	//Chip Enabled
}

void Start_SS(void)
{
	NRF24L01P_CSN_PORT &= ~_BV(NRF24L01P_CSN_PIN);
 172:	c2 98       	cbi	0x18, 2	; 24
}

uint8_t ReadReg(uint8_t ucAddr, uint8_t *pucData) {
//	portENTER_CRITICAL();
	Start_SS(); // pull down the CSN pin
	uint8_t ucTmp = TransChar(R_REGISTER | (REGISTER_MASK & ucAddr));
 174:	8f 71       	andi	r24, 0x1F	; 31
 176:	f1 d0       	rcall	.+482    	; 0x35a <TransChar>
 178:	f8 2e       	mov	r15, r24
	// write the command to read a register and return the value in the status register
	*pucData = TransChar(NOP); // get the data from the register
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	ee d0       	rcall	.+476    	; 0x35a <TransChar>
 17e:	f8 01       	movw	r30, r16
 180:	80 83       	st	Z, r24
	//_delay_ms(1);
}

void Stop_SS(void)
{
	NRF24L01P_CSN_PORT |= _BV(NRF24L01P_CSN_PIN);
 182:	c2 9a       	sbi	0x18, 2	; 24
	// write the command to read a register and return the value in the status register
	*pucData = TransChar(NOP); // get the data from the register
	Stop_SS(); // pull up the CSN pin
//	portEXIT_CRITICAL();
	return ucTmp; // return the value in the status register
}
 184:	8f 2d       	mov	r24, r15
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	ff 90       	pop	r15
 18c:	08 95       	ret

0000018e <WriteReg>:
//	portEXIT_CRITICAL()	;


}

uint8_t WriteReg(uint8_t ucAddr, uint8_t ucData) {
 18e:	0f 93       	push	r16
 190:	1f 93       	push	r17
 192:	16 2f       	mov	r17, r22
	NRF24L01P_CE_PORT |= _BV(NRF24L01P_CE_PIN);	//Chip Enabled
}

void Start_SS(void)
{
	NRF24L01P_CSN_PORT &= ~_BV(NRF24L01P_CSN_PIN);
 194:	c2 98       	cbi	0x18, 2	; 24
}

uint8_t WriteReg(uint8_t ucAddr, uint8_t ucData) {
	//portENTER_CRITICAL();
	Start_SS();// pull down the CSN pin
	uint8_t ucTmp = TransChar(W_REGISTER | (REGISTER_MASK & ucAddr));
 196:	8f 71       	andi	r24, 0x1F	; 31
 198:	80 62       	ori	r24, 0x20	; 32
 19a:	df d0       	rcall	.+446    	; 0x35a <TransChar>
 19c:	08 2f       	mov	r16, r24
	// write the command to write a register and return the value in the status register
	TransChar(ucData); // write the data to the register
 19e:	81 2f       	mov	r24, r17
 1a0:	dc d0       	rcall	.+440    	; 0x35a <TransChar>
	//_delay_ms(1);
}

void Stop_SS(void)
{
	NRF24L01P_CSN_PORT |= _BV(NRF24L01P_CSN_PIN);
 1a2:	c2 9a       	sbi	0x18, 2	; 24
	// write the command to write a register and return the value in the status register
	TransChar(ucData); // write the data to the register
	Stop_SS(); // pull up the CSN pin
	//portEXIT_CRITICAL();
	return ucTmp;
}
 1a4:	80 2f       	mov	r24, r16
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <CMD_2>:

uint8_t CMD_2(uint8_t ucCMD, uint8_t *pucSend, uint8_t ucLen,
		uint8_t *pucReceive) {
 1ac:	cf 92       	push	r12
 1ae:	df 92       	push	r13
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	8b 01       	movw	r16, r22
 1ba:	d4 2e       	mov	r13, r20
 1bc:	79 01       	movw	r14, r18
	NRF24L01P_CE_PORT |= _BV(NRF24L01P_CE_PIN);	//Chip Enabled
}

void Start_SS(void)
{
	NRF24L01P_CSN_PORT &= ~_BV(NRF24L01P_CSN_PIN);
 1be:	c2 98       	cbi	0x18, 2	; 24

uint8_t CMD_2(uint8_t ucCMD, uint8_t *pucSend, uint8_t ucLen,
		uint8_t *pucReceive) {
	uint8_t ucTmp;
	Start_SS(); // pull down the CSN pin
	ucTmp = TransChar(ucCMD); // write the command and receive the value in the status register
 1c0:	cc d0       	rcall	.+408    	; 0x35a <TransChar>
 1c2:	c8 2e       	mov	r12, r24
	TransBlock(pucSend, ucLen, pucReceive); // write and receive a block of data with length equals to ucLen
 1c4:	c8 01       	movw	r24, r16
 1c6:	6d 2d       	mov	r22, r13
 1c8:	a7 01       	movw	r20, r14
 1ca:	cc d0       	rcall	.+408    	; 0x364 <TransBlock>
	//_delay_ms(1);
}

void Stop_SS(void)
{
	NRF24L01P_CSN_PORT |= _BV(NRF24L01P_CSN_PIN);
 1cc:	c2 9a       	sbi	0x18, 2	; 24
	Start_SS(); // pull down the CSN pin
	ucTmp = TransChar(ucCMD); // write the command and receive the value in the status register
	TransBlock(pucSend, ucLen, pucReceive); // write and receive a block of data with length equals to ucLen
	Stop_SS(); // pull up the CSN pin
	return ucTmp; // return the value in the status register
}
 1ce:	8c 2d       	mov	r24, r12
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	ef 90       	pop	r14
 1d8:	df 90       	pop	r13
 1da:	cf 90       	pop	r12
 1dc:	08 95       	ret

000001de <WriteReg_2>:
{
	NRF24L01P_CSN_PORT |= _BV(NRF24L01P_CSN_PIN);
}

uint8_t WriteReg_2(uint8_t ucAddr, uint8_t *pucBuff, uint8_t ucLen) {
		return CMD_2(W_REGISTER | (REGISTER_MASK & ucAddr), pucBuff, ucLen, NULL);
 1de:	8f 71       	andi	r24, 0x1F	; 31
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	20 e0       	ldi	r18, 0x00	; 0
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	e2 df       	rcall	.-60     	; 0x1ac <CMD_2>
	}
 1e8:	08 95       	ret

000001ea <ChangeAddr>:

void ChangeAddr(uint8_t *pucAddr) {
 1ea:	8f 92       	push	r8
 1ec:	9f 92       	push	r9
 1ee:	af 92       	push	r10
 1f0:	bf 92       	push	r11
 1f2:	cf 92       	push	r12
 1f4:	df 92       	push	r13
 1f6:	ef 92       	push	r14
 1f8:	ff 92       	push	r15
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	df 93       	push	r29
 200:	cf 93       	push	r28
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
		for (i = 5; i; i--) {
			*(pucTmp + i - 1) = pucAddr[5 - i]; // reverse the pipe0 address
			WriteReg_2(RX_ADDR_P0, pucTmp, 5); // set the pipe0 address
			//WriteReg_2(TX_ADDR, pucTmp, 5); // set the TX address the same as the pipe0 address   --For PTX device only!
		}
}
 206:	ad b6       	in	r10, 0x3d	; 61
 208:	be b6       	in	r11, 0x3e	; 62
	}

void ChangeAddr(uint8_t *pucAddr) {
		uint8_t *pucTmp;
		uint8_t i;
		pucTmp = (uint8_t*) alloca(sizeof(uint8_t[5])); // allocate enough space from the stack
 20a:	00 d0       	rcall	.+0      	; 0x20c <ChangeAddr+0x22>
 20c:	00 d0       	rcall	.+0      	; 0x20e <ChangeAddr+0x24>
 20e:	0f 92       	push	r0
 210:	2d b7       	in	r18, 0x3d	; 61
 212:	3e b7       	in	r19, 0x3e	; 62
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	3f 4f       	sbci	r19, 0xFF	; 255
 218:	49 01       	movw	r8, r18
 21a:	7c 01       	movw	r14, r24
 21c:	89 01       	movw	r16, r18
		for (i = 5; i; i--) {
 21e:	cd b6       	in	r12, 0x3d	; 61
 220:	de b6       	in	r13, 0x3e	; 62
 222:	8c ef       	ldi	r24, 0xFC	; 252
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	c8 0e       	add	r12, r24
 228:	d9 1e       	adc	r13, r25
			*(pucTmp + i - 1) = pucAddr[5 - i]; // reverse the pipe0 address
 22a:	f7 01       	movw	r30, r14
 22c:	81 91       	ld	r24, Z+
 22e:	7f 01       	movw	r14, r30
 230:	f8 01       	movw	r30, r16
 232:	84 83       	std	Z+4, r24	; 0x04
			WriteReg_2(RX_ADDR_P0, pucTmp, 5); // set the pipe0 address
 234:	8a e0       	ldi	r24, 0x0A	; 10
 236:	b4 01       	movw	r22, r8
 238:	45 e0       	ldi	r20, 0x05	; 5
 23a:	d1 df       	rcall	.-94     	; 0x1de <WriteReg_2>
 23c:	01 50       	subi	r16, 0x01	; 1
 23e:	10 40       	sbci	r17, 0x00	; 0

void ChangeAddr(uint8_t *pucAddr) {
		uint8_t *pucTmp;
		uint8_t i;
		pucTmp = (uint8_t*) alloca(sizeof(uint8_t[5])); // allocate enough space from the stack
		for (i = 5; i; i--) {
 240:	0c 15       	cp	r16, r12
 242:	1d 05       	cpc	r17, r13
 244:	91 f7       	brne	.-28     	; 0x22a <ChangeAddr+0x40>
			*(pucTmp + i - 1) = pucAddr[5 - i]; // reverse the pipe0 address
			WriteReg_2(RX_ADDR_P0, pucTmp, 5); // set the pipe0 address
			//WriteReg_2(TX_ADDR, pucTmp, 5); // set the TX address the same as the pipe0 address   --For PTX device only!
		}
}
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	be be       	out	0x3e, r11	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	ad be       	out	0x3d, r10	; 61
 250:	cf 91       	pop	r28
 252:	df 91       	pop	r29
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	df 90       	pop	r13
 25e:	cf 90       	pop	r12
 260:	bf 90       	pop	r11
 262:	af 90       	pop	r10
 264:	9f 90       	pop	r9
 266:	8f 90       	pop	r8
 268:	08 95       	ret

0000026a <SetProperty>:
//		m_ucRxQueueLength--; // decrease the global counter
//	}
//	return m_ucRxQueueLength; // return the number of package remaining in the RX queue, usually 0
//}

void SetProperty(NRF24L01P_Property_t *psProperty) {
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
//	pTmp->CEUp(); // return to PRX mode
//}
//

void CEDown(void){
	NRF24L01P_CE_PORT &= ~_BV(NRF24L01P_CE_PIN);  //Chip Disabled
 26e:	a8 98       	cbi	0x15, 0	; 21
//}

void SetProperty(NRF24L01P_Property_t *psProperty) {
	//portENTER_CRITICAL();
	CEDown(); // to ensure being at standby mode
	WriteReg(RF_CH, (psProperty->ucCH) & 0x7F); // set the channel
 270:	fc 01       	movw	r30, r24
 272:	61 91       	ld	r22, Z+
 274:	8f 01       	movw	r16, r30
 276:	6f 77       	andi	r22, 0x7F	; 127
 278:	85 e0       	ldi	r24, 0x05	; 5
 27a:	89 df       	rcall	.-238    	; 0x18e <WriteReg>
	ChangeAddr(psProperty->pucAddr);
 27c:	c8 01       	movw	r24, r16
 27e:	b5 df       	rcall	.-150    	; 0x1ea <ChangeAddr>
void CEDown(void){
	NRF24L01P_CE_PORT &= ~_BV(NRF24L01P_CE_PIN);  //Chip Disabled
}

void CEUp(void) {
	NRF24L01P_CE_PORT |= _BV(NRF24L01P_CE_PIN);	//Chip Enabled
 280:	a8 9a       	sbi	0x15, 0	; 21
//	memcpy((void*) &m_sProperty, (const void*) psProperty, sizeof(NRF24L01P_Property_t)); // copy data
//	if (psProperty->ucMaxTxQueueLength > 20)
//		m_sProperty.ucMaxTxQueueLength = 20; // the TX queue size should be less than 20, or the receiver may crash
//	//portEXIT_CRITICAL();

}
 282:	1f 91       	pop	r17
 284:	0f 91       	pop	r16
 286:	08 95       	ret

00000288 <CMD>:
	Stop_SS(); // pull up the CSN pin
	return ucTmp; // return the value in the status register
}

uint8_t CMD(uint8_t ucCMD) {
	return CMD_2(ucCMD,NULL,0,NULL);
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	8c df       	rcall	.-232    	; 0x1ac <CMD_2>
}
 294:	08 95       	ret

00000296 <NRF24L01P_Init>:

#include "nrf24l01p.h"


void NRF24L01P_Init(NRF24L01P_Property_t NRF24L01P_mProperty)
{
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	df 93       	push	r29
 29c:	cf 93       	push	r28
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <NRF24L01P_Init+0xa>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <NRF24L01P_Init+0xc>
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <NRF24L01P_Init+0xe>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62

	NRF24L01P_mProperty.ucCH=30; // default channel
 2a8:	8e e1       	ldi	r24, 0x1E	; 30
 2aa:	89 83       	std	Y+1, r24	; 0x01
	NRF24L01P_mProperty.pucAddr[0]=0xE6;
 2ac:	86 ee       	ldi	r24, 0xE6	; 230
 2ae:	8a 83       	std	Y+2, r24	; 0x02
	NRF24L01P_mProperty.pucAddr[1]=0xE6;
 2b0:	8b 83       	std	Y+3, r24	; 0x03
	NRF24L01P_mProperty.pucAddr[2]=0xE6;
 2b2:	8c 83       	std	Y+4, r24	; 0x04
	NRF24L01P_mProperty.pucAddr[3]=0xE6;
 2b4:	8d 83       	std	Y+5, r24	; 0x05
	NRF24L01P_mProperty.pucAddr[4]=0xC1;
 2b6:	81 ec       	ldi	r24, 0xC1	; 193
 2b8:	8e 83       	std	Y+6, r24	; 0x06


	NRF24L01P_IRQWRONG_PORT &= ~_BV(NRF24L01P_IRQWRONG_PIN); // set the wrong IRQ pin to output high Z
 2ba:	a9 98       	cbi	0x15, 1	; 21
	NRF24L01P_IRQWRONG_DDR &= ~_BV(NRF24L01P_IRQWRONG_PIN);
 2bc:	a1 98       	cbi	0x14, 1	; 20

	NRF24L01P_IRQ_PORT |= _BV(NRF24L01P_IRQ_PIN); // set the IRQ pin to input mode with internal pull-up resister
 2be:	93 9a       	sbi	0x12, 3	; 18
	NRF24L01P_IRQ_DDR &= ~_BV(NRF24L01P_IRQ_PIN);
 2c0:	8b 98       	cbi	0x11, 3	; 17


	NRF24L01P_CE_PORT &= ~_BV(NRF24L01P_CE_PIN); // set the CE to output and set it to 0 for now
 2c2:	a8 98       	cbi	0x15, 0	; 21
	NRF24L01P_CE_DDR  |= _BV(NRF24L01P_CE_PIN);
 2c4:	a0 9a       	sbi	0x14, 0	; 20

	//setup external interrupt 1
	//MCUCR=0 //low level trigger interrupt
	GICR=_BV(INT1);
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	8b bf       	out	0x3b, r24	; 59
//	pTmp->CEUp(); // return to PRX mode
//}
//

void CEDown(void){
	NRF24L01P_CE_PORT &= ~_BV(NRF24L01P_CE_PIN);  //Chip Disabled
 2ca:	a8 98       	cbi	0x15, 0	; 21


	CEDown(); // make sure the RF chip is in standby or power down mode
//	portENTER_CRITICAL();

	WriteReg(CONFIG, _BV(EN_CRC) | _BV(CRCO)); // power down
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	6c e0       	ldi	r22, 0x0C	; 12
 2d0:	5e df       	rcall	.-324    	; 0x18e <WriteReg>
	WriteReg(CONFIG, _BV(PWR_UP) | _BV(EN_CRC) | _BV(CRCO) | _BV(MASK_TX_DS) | _BV(MASK_MAX_RT) | _BV(PRIM_RX) ); // power up in rTX mode, enable RX_DR interrupt
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	6f e3       	ldi	r22, 0x3F	; 63
 2d6:	5b df       	rcall	.-330    	; 0x18e <WriteReg>
	//in standby-I
	CMD(FLUSH_TX); // flush both RX and TX FIFOs
 2d8:	81 ee       	ldi	r24, 0xE1	; 225
 2da:	d6 df       	rcall	.-84     	; 0x288 <CMD>
	CMD(FLUSH_RX);
 2dc:	82 ee       	ldi	r24, 0xE2	; 226
 2de:	d4 df       	rcall	.-88     	; 0x288 <CMD>
	WriteReg(STATUS, 0x70); // clear the interrupt
 2e0:	87 e0       	ldi	r24, 0x07	; 7
 2e2:	60 e7       	ldi	r22, 0x70	; 112
 2e4:	54 df       	rcall	.-344    	; 0x18e <WriteReg>

	//WriteReg(RF_SETUP, 0x26); // set the data rate to 250kbps with 0dBm output power
	WriteReg(RF_SETUP, 0x0E); // set the data rate to 250kbps with 0dBm output power
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	6e e0       	ldi	r22, 0x0E	; 14
 2ea:	51 df       	rcall	.-350    	; 0x18e <WriteReg>

	WriteReg(EN_AA, 0x01); // enable auto acknowledgment for pipe0
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	4e df       	rcall	.-356    	; 0x18e <WriteReg>
	WriteReg(EN_RXADDR, 0x01); // enable pipe0
 2f2:	82 e0       	ldi	r24, 0x02	; 2
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	4b df       	rcall	.-362    	; 0x18e <WriteReg>
	WriteReg(DYNPD, 0x01); // enable dynamic payload length in pipe0
 2f8:	8c e1       	ldi	r24, 0x1C	; 28
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	48 df       	rcall	.-368    	; 0x18e <WriteReg>
	WriteReg(FEATURE, _BV(EN_DPL) | _BV(EN_ACK_PAY)); // enable global dynamic payload length and payload with ACK
 2fe:	8d e1       	ldi	r24, 0x1D	; 29
 300:	66 e0       	ldi	r22, 0x06	; 6
 302:	45 df       	rcall	.-374    	; 0x18e <WriteReg>
	WriteReg(SETUP_AW, 0x03); // set address width to 5
 304:	83 e0       	ldi	r24, 0x03	; 3
 306:	63 e0       	ldi	r22, 0x03	; 3
 308:	42 df       	rcall	.-380    	; 0x18e <WriteReg>
	WriteReg(SETUP_RETR, 0xFF); // wait 4ms for each retransmit, maximum 15 retransmits allowed
 30a:	84 e0       	ldi	r24, 0x04	; 4
 30c:	6f ef       	ldi	r22, 0xFF	; 255
 30e:	3f df       	rcall	.-386    	; 0x18e <WriteReg>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 310:	08 e6       	ldi	r16, 0x68	; 104
 312:	10 e1       	ldi	r17, 0x10	; 16
 314:	c8 01       	movw	r24, r16
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <NRF24L01P_Init+0x80>
	// enable 2 bytes CRC
	_delay_ms(1.4); // wait for power up
	SetProperty(&NRF24L01P_mProperty);
 31a:	ce 01       	movw	r24, r28
 31c:	01 96       	adiw	r24, 0x01	; 1
 31e:	a5 df       	rcall	.-182    	; 0x26a <SetProperty>
 320:	c8 01       	movw	r24, r16
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <NRF24L01P_Init+0x8c>
//	EICRB |= _BV(ISC71);
//	EIMSK |= _BV(INT7); // external interrupt on PE7, falling edge trigger
//	portEXIT_CRITICAL()	;


}
 326:	26 96       	adiw	r28, 0x06	; 6
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	cf 91       	pop	r28
 334:	df 91       	pop	r29
 336:	1f 91       	pop	r17
 338:	0f 91       	pop	r16
 33a:	08 95       	ret

0000033c <SPI_Init>:
#include "spi.h"

//static void Init(CLK ePrescale = D4, DataOrder eOrder = MSB, ClkPolarity eClkPolarity = Rising, ClkSamplePhase eClkPhase = Leading)
void SPI_Init(SPI_CLK ePrescale, SPI_DataOrder eOrder, SPI_ClkPolarity eClkPolarity , SPI_ClkSamplePhase eClkPhase)
{
	DDRB &= ~_BV(PB4); //set MISO as input
 33c:	bc 98       	cbi	0x17, 4	; 23
	DDRB |= _BV(PB2) | _BV(PB3) | _BV(PB5); //set SS,MOSI, SCK as output
 33e:	97 b3       	in	r25, 0x17	; 23
 340:	9c 62       	ori	r25, 0x2C	; 44
 342:	97 bb       	out	0x17, r25	; 23
	//PORTB |= _BV(PB2) | _BV(PB3) | _BV(PB4) | _BV(PB5); //doesn't really matter
	SPCR = _BV(MSTR) | ((uint8_t) (eOrder)) | ((uint8_t) (eClkPolarity)) | ((uint8_t)(eClkPhase))	| (((uint8_t) (ePrescale)) >> 1); // set parameters
 344:	98 2f       	mov	r25, r24
 346:	96 95       	lsr	r25
 348:	69 2b       	or	r22, r25
 34a:	60 61       	ori	r22, 0x10	; 16
 34c:	64 2b       	or	r22, r20
 34e:	62 2b       	or	r22, r18
 350:	6d b9       	out	0x0d, r22	; 13
	SPSR = ((uint8_t) (ePrescale)) & 0x01; // might enter 2X speed mode
 352:	81 70       	andi	r24, 0x01	; 1
 354:	8e b9       	out	0x0e, r24	; 14
	SPCR |= _BV(SPE); // enable the SPI
 356:	6e 9a       	sbi	0x0d, 6	; 13
}
 358:	08 95       	ret

0000035a <TransChar>:

uint8_t TransChar(uint8_t ucData) {
//	portENTER_CRITICAL();
	SPDR = ucData;
 35a:	8f b9       	out	0x0f, r24	; 15
	while(! (SPSR & _BV(SPIF))); //wait until previous transfer compolete
 35c:	77 9b       	sbis	0x0e, 7	; 14
 35e:	fe cf       	rjmp	.-4      	; 0x35c <TransChar+0x2>
//	portEXIT_CRITICAL();
	return SPDR;
 360:	8f b1       	in	r24, 0x0f	; 15
}
 362:	08 95       	ret

00000364 <TransBlock>:

void TransBlock(uint8_t *pucSend, uint8_t ucLen,
		uint8_t *pucReceive) {
 364:	dc 01       	movw	r26, r24
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	0f c0       	rjmp	.+30     	; 0x38a <TransBlock+0x26>
	uint8_t i;
	uint8_t ucTmp;
	for (i = 0; i < ucLen; i++) {
		ucTmp = TransChar(*(pucSend + i));
 36c:	8c 91       	ld	r24, X
	SPCR |= _BV(SPE); // enable the SPI
}

uint8_t TransChar(uint8_t ucData) {
//	portENTER_CRITICAL();
	SPDR = ucData;
 36e:	8f b9       	out	0x0f, r24	; 15
	while(! (SPSR & _BV(SPIF))); //wait until previous transfer compolete
 370:	77 9b       	sbis	0x0e, 7	; 14
 372:	fe cf       	rjmp	.-4      	; 0x370 <TransBlock+0xc>
//	portEXIT_CRITICAL();
	return SPDR;
 374:	8f b1       	in	r24, 0x0f	; 15
		uint8_t *pucReceive) {
	uint8_t i;
	uint8_t ucTmp;
	for (i = 0; i < ucLen; i++) {
		ucTmp = TransChar(*(pucSend + i));
		if (pucReceive)
 376:	41 15       	cp	r20, r1
 378:	51 05       	cpc	r21, r1
 37a:	21 f0       	breq	.+8      	; 0x384 <TransBlock+0x20>
			*(pucReceive + i) = ucTmp;
 37c:	fa 01       	movw	r30, r20
 37e:	e2 0f       	add	r30, r18
 380:	f3 1f       	adc	r31, r19
 382:	80 83       	st	Z, r24
 384:	2f 5f       	subi	r18, 0xFF	; 255
 386:	3f 4f       	sbci	r19, 0xFF	; 255
 388:	11 96       	adiw	r26, 0x01	; 1

void TransBlock(uint8_t *pucSend, uint8_t ucLen,
		uint8_t *pucReceive) {
	uint8_t i;
	uint8_t ucTmp;
	for (i = 0; i < ucLen; i++) {
 38a:	26 17       	cp	r18, r22
 38c:	78 f3       	brcs	.-34     	; 0x36c <TransBlock+0x8>
		ucTmp = TransChar(*(pucSend + i));
		if (pucReceive)
			*(pucReceive + i) = ucTmp;
	}
}
 38e:	08 95       	ret

00000390 <uart_init>:
static volatile unsigned char UART_RxHead; //writing
static volatile unsigned char UART_RxTail; //read
//static volatile unsigned char UART_LastRxError;

void uart_init(uint32_t baud, enum UART_SPEED_MODE SendingSpeed)
{
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	8b 01       	movw	r16, r22
 396:	9c 01       	movw	r18, r24

	reset=NULL;
 398:	10 92 65 02 	sts	0x0265, r1
 39c:	10 92 64 02 	sts	0x0264, r1

	UART_TxHead=0;
 3a0:	10 92 60 02 	sts	0x0260, r1
	UART_TxTail=0;
 3a4:	10 92 61 02 	sts	0x0261, r1
	UART_RxHead=0;
 3a8:	10 92 62 02 	sts	0x0262, r1
	UART_RxTail=0;
 3ac:	10 92 63 02 	sts	0x0263, r1

	UCSRC = _BV(URSEL)|_BV(UCSZ1)|_BV(UCSZ0); // Asyncrhnous, No Parity, 1 Stop Bit, 8bit
 3b0:	86 e8       	ldi	r24, 0x86	; 134
 3b2:	80 bd       	out	0x20, r24	; 32



	switch (SendingSpeed)
 3b4:	44 23       	and	r20, r20
 3b6:	19 f0       	breq	.+6      	; 0x3be <uart_init+0x2e>
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	09 f5       	brne	.+66     	; 0x3fe <uart_init+0x6e>
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <uart_init+0x32>
	{
		case USE_1X:
			UCSRA &= ~_BV(U2X);
 3be:	59 98       	cbi	0x0b, 1	; 11
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <uart_init+0x34>
			UBRRH=(unsigned char) (UBRR_VALUE(baud)>>8);
			UBRRL=(unsigned char) (UBRR_VALUE(baud) & 0xFF);
			break;
		case USE_2X:
			UCSRA |= _BV(U2X);
 3c2:	59 9a       	sbi	0x0b, 1	; 11
			UBRRH=(unsigned char) (UBRR_VALUE_DOUBLE_SPEED(baud)>>8);
 3c4:	44 e0       	ldi	r20, 0x04	; 4
 3c6:	00 0f       	add	r16, r16
 3c8:	11 1f       	adc	r17, r17
 3ca:	22 1f       	adc	r18, r18
 3cc:	33 1f       	adc	r19, r19
 3ce:	4a 95       	dec	r20
 3d0:	d1 f7       	brne	.-12     	; 0x3c6 <uart_init+0x36>
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	7b e1       	ldi	r23, 0x1B	; 27
 3d6:	87 eb       	ldi	r24, 0xB7	; 183
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	a9 01       	movw	r20, r18
 3dc:	98 01       	movw	r18, r16
 3de:	62 d0       	rcall	.+196    	; 0x4a4 <__udivmodsi4>
 3e0:	c9 01       	movw	r24, r18
 3e2:	da 01       	movw	r26, r20
 3e4:	01 97       	sbiw	r24, 0x01	; 1
 3e6:	a1 09       	sbc	r26, r1
 3e8:	b1 09       	sbc	r27, r1
 3ea:	29 2f       	mov	r18, r25
 3ec:	3a 2f       	mov	r19, r26
 3ee:	4b 2f       	mov	r20, r27
 3f0:	55 27       	eor	r21, r21
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	a1 1d       	adc	r26, r1
 3f6:	b1 1d       	adc	r27, r1
 3f8:	20 bd       	out	0x20, r18	; 32
			UBRRL=(unsigned char) (UBRR_VALUE_DOUBLE_SPEED(baud) & 0xFF);
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	89 b9       	out	0x09, r24	; 9



    //Enable receive interrupt, enable Receiver and Transmitter
	//UCSRB = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);
	UCSRB = _BV(RXEN)|_BV(TXEN);
 3fe:	88 e1       	ldi	r24, 0x18	; 24
 400:	8a b9       	out	0x0a, r24	; 10
//
//    	//
//
//    }

}
 402:	1f 91       	pop	r17
 404:	0f 91       	pop	r16
 406:	08 95       	ret

00000408 <uart_putc>:


void uart_putc(unsigned char data)
{
 408:	28 2f       	mov	r18, r24

	//while ( !( UCSRA & (1<<UDRE)) ); //Wait for empty transmit buffer, sould be empty because it is suppoed to be called in interrupt
	unsigned char tmpHEAD;
	tmpHEAD=(UART_TxHead+1) & (UART_TX_BUFFER_SIZE-1); //buffer about to full, refuse to write
 40a:	90 91 60 02 	lds	r25, 0x0260
 40e:	9f 5f       	subi	r25, 0xFF	; 255
	while (tmpHEAD==UART_TxTail) ; //wait for freespace
 410:	80 91 61 02 	lds	r24, 0x0261
 414:	98 17       	cp	r25, r24
 416:	e1 f3       	breq	.-8      	; 0x410 <uart_putc+0x8>

	cli();
 418:	f8 94       	cli
	UART_TxHead=tmpHEAD;
 41a:	90 93 60 02 	sts	0x0260, r25
	UART_TxBuf[UART_TxHead]=data;
 41e:	e0 91 60 02 	lds	r30, 0x0260
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	e0 5a       	subi	r30, 0xA0	; 160
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	20 83       	st	Z, r18
	sei();
 42a:	78 94       	sei

	//enable TX interrupt

	 UCSRB |= _BV(UDRIE);
 42c:	55 9a       	sbi	0x0a, 5	; 10

	return;

}
 42e:	08 95       	ret

00000430 <uart_puts>:
//
//}


void uart_puts(const char *s )
{
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	ec 01       	movw	r28, r24
 436:	02 c0       	rjmp	.+4      	; 0x43c <uart_puts+0xc>
    while (*s)
      uart_putc(*s++);
 438:	21 96       	adiw	r28, 0x01	; 1
 43a:	e6 df       	rcall	.-52     	; 0x408 <uart_putc>
//}


void uart_puts(const char *s )
{
    while (*s)
 43c:	88 81       	ld	r24, Y
 43e:	88 23       	and	r24, r24
 440:	d9 f7       	brne	.-10     	; 0x438 <uart_puts+0x8>
      uart_putc(*s++);

}/* uart_puts */
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	08 95       	ret

00000448 <__vector_12>:

}*/

//Sending Interrupt
ISR(USART_UDRE_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	8f 93       	push	r24
 454:	9f 93       	push	r25
 456:	ef 93       	push	r30
 458:	ff 93       	push	r31
	Purpose:  called when the UART is ready to transmit the next byte
	**************************************************************************/

	unsigned char tmptail;

	if ( UART_TxHead != UART_TxTail) //sending soft buffer has stuff
 45a:	90 91 60 02 	lds	r25, 0x0260
 45e:	80 91 61 02 	lds	r24, 0x0261
 462:	98 17       	cp	r25, r24
 464:	59 f0       	breq	.+22     	; 0x47c <__stack+0x1d>
	{
		/* calculate and store new buffer index */
		tmptail = (UART_TxTail + 1) & (UART_TX_BUFFER_SIZE-1);
 466:	e0 91 61 02 	lds	r30, 0x0261
 46a:	ef 5f       	subi	r30, 0xFF	; 255
		UART_TxTail = tmptail;
 46c:	e0 93 61 02 	sts	0x0261, r30
		/* get one byte from buffer and write it to UART */
		UDR = UART_TxBuf[tmptail];  /* start transmission */
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	e0 5a       	subi	r30, 0xA0	; 160
 474:	ff 4f       	sbci	r31, 0xFF	; 255
 476:	80 81       	ld	r24, Z
 478:	8c b9       	out	0x0c, r24	; 12
 47a:	01 c0       	rjmp	.+2      	; 0x47e <__stack+0x1f>
	}
	else{
		/* tx buffer empty, disable UDRE interrupt */
		UCSRB &= ~_BV(UDRIE);
 47c:	55 98       	cbi	0x0a, 5	; 10
	}


}
 47e:	ff 91       	pop	r31
 480:	ef 91       	pop	r30
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	0f 90       	pop	r0
 488:	0f be       	out	0x3f, r0	; 63
 48a:	0f 90       	pop	r0
 48c:	1f 90       	pop	r1
 48e:	18 95       	reti

00000490 <__vector_11>:


//Receiving Interrupt
ISR(USART_RXC_vect)
{
 490:	1f 92       	push	r1
 492:	0f 92       	push	r0
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	0f 92       	push	r0
 498:	11 24       	eor	r1, r1
//	//}
//	//UART_LastRxError = lastRxError;
//


}
 49a:	0f 90       	pop	r0
 49c:	0f be       	out	0x3f, r0	; 63
 49e:	0f 90       	pop	r0
 4a0:	1f 90       	pop	r1
 4a2:	18 95       	reti

000004a4 <__udivmodsi4>:
 4a4:	a1 e2       	ldi	r26, 0x21	; 33
 4a6:	1a 2e       	mov	r1, r26
 4a8:	aa 1b       	sub	r26, r26
 4aa:	bb 1b       	sub	r27, r27
 4ac:	fd 01       	movw	r30, r26
 4ae:	0d c0       	rjmp	.+26     	; 0x4ca <__udivmodsi4_ep>

000004b0 <__udivmodsi4_loop>:
 4b0:	aa 1f       	adc	r26, r26
 4b2:	bb 1f       	adc	r27, r27
 4b4:	ee 1f       	adc	r30, r30
 4b6:	ff 1f       	adc	r31, r31
 4b8:	a2 17       	cp	r26, r18
 4ba:	b3 07       	cpc	r27, r19
 4bc:	e4 07       	cpc	r30, r20
 4be:	f5 07       	cpc	r31, r21
 4c0:	20 f0       	brcs	.+8      	; 0x4ca <__udivmodsi4_ep>
 4c2:	a2 1b       	sub	r26, r18
 4c4:	b3 0b       	sbc	r27, r19
 4c6:	e4 0b       	sbc	r30, r20
 4c8:	f5 0b       	sbc	r31, r21

000004ca <__udivmodsi4_ep>:
 4ca:	66 1f       	adc	r22, r22
 4cc:	77 1f       	adc	r23, r23
 4ce:	88 1f       	adc	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	1a 94       	dec	r1
 4d4:	69 f7       	brne	.-38     	; 0x4b0 <__udivmodsi4_loop>
 4d6:	60 95       	com	r22
 4d8:	70 95       	com	r23
 4da:	80 95       	com	r24
 4dc:	90 95       	com	r25
 4de:	9b 01       	movw	r18, r22
 4e0:	ac 01       	movw	r20, r24
 4e2:	bd 01       	movw	r22, r26
 4e4:	cf 01       	movw	r24, r30
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
